// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MondialMunch;

#nullable disable

namespace MondialMunch.Migrations
{
    [DbContext(typeof(MondialMunchContext))]
    partial class MondialMunchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("DietaryTagRecipe", b =>
                {
                    b.Property<int>("TaggedRecipesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaggedRecipesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("DietaryTagRecipe");
                });

            modelBuilder.Entity("Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("MondialMunch.CompletedRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipeCompletedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserCompletingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCompletedId");

                    b.HasIndex("UserCompletingId");

                    b.ToTable("CompletedRecipe");
                });

            modelBuilder.Entity("MondialMunch.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MondialMunch.DietaryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DietaryTags");
                });

            modelBuilder.Entity("MondialMunch.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryCurrentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryOriginId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("_password")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("Password");

                    b.Property<byte[]>("_salt")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("Salt");

                    b.HasKey("Id");

                    b.HasIndex("CountryCurrentId");

                    b.HasIndex("CountryOriginId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CookingTime")
                        .HasColumnType("REAL");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PrepTime")
                        .HasColumnType("REAL");

                    b.Property<int>("Servings")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeInstruction");
                });

            modelBuilder.Entity("RecipeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stars")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipeReview");
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.Property<int>("FavouriteRecipiesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavouriteUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavouriteRecipiesId", "FavouriteUsersId");

                    b.HasIndex("FavouriteUsersId");

                    b.ToTable("RecipeUser");
                });

            modelBuilder.Entity("RecipeUser1", b =>
                {
                    b.Property<int>("TodoRecipiesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TodoUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TodoRecipiesId", "TodoUsersId");

                    b.HasIndex("TodoUsersId");

                    b.ToTable("RecipeUser1");
                });

            modelBuilder.Entity("DietaryTagRecipe", b =>
                {
                    b.HasOne("Recipe", null)
                        .WithMany()
                        .HasForeignKey("TaggedRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.DietaryTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingredient", b =>
                {
                    b.HasOne("Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MondialMunch.CompletedRecipe", b =>
                {
                    b.HasOne("Recipe", "RecipeCompleted")
                        .WithMany()
                        .HasForeignKey("RecipeCompletedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.User", "UserCompleting")
                        .WithMany("CompletedRecipies")
                        .HasForeignKey("UserCompletingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeCompleted");

                    b.Navigation("UserCompleting");
                });

            modelBuilder.Entity("MondialMunch.User", b =>
                {
                    b.HasOne("MondialMunch.Country", "CountryCurrent")
                        .WithMany()
                        .HasForeignKey("CountryCurrentId");

                    b.HasOne("MondialMunch.Country", "CountryOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryCurrent");

                    b.Navigation("CountryOrigin");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.HasOne("MondialMunch.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.User", "Creator")
                        .WithMany("PersonalRecipes")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Country");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RecipeInstruction", b =>
                {
                    b.HasOne("Recipe", "Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeReview", b =>
                {
                    b.HasOne("Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.HasOne("Recipe", null)
                        .WithMany()
                        .HasForeignKey("FavouriteRecipiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.User", null)
                        .WithMany()
                        .HasForeignKey("FavouriteUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeUser1", b =>
                {
                    b.HasOne("Recipe", null)
                        .WithMany()
                        .HasForeignKey("TodoRecipiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MondialMunch.User", null)
                        .WithMany()
                        .HasForeignKey("TodoUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MondialMunch.User", b =>
                {
                    b.Navigation("CompletedRecipies");

                    b.Navigation("PersonalRecipes");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
